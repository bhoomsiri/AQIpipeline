from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook
from datetime import datetime, timedelta
import logging

THRESHOLD = 150  # ‚úÖ ‡∏Ñ‡πà‡∏≤ AQI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô

default_args = {
    'owner': 'airflow',
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def check_high_aqi():
    hook = PostgresHook(postgres_conn_id='postgres_conn')
    conn = hook.get_conn()
    cur = conn.cursor()

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    cur.execute("""
        SELECT city, aqi, timestamp_utc
        FROM air_quality_data
        WHERE timestamp_utc >= NOW() - INTERVAL '1 hour'
          AND aqi >= %s
        ORDER BY aqi DESC;
    """, (THRESHOLD,))
    results = cur.fetchall()

    cur.close()
    conn.close()

    if results:
        logging.warning("üö® ‡∏û‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà AQI ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        for city, aqi, timestamp in results:
            logging.warning(f"‚ö†Ô∏è {city} | AQI = {aqi} @ {timestamp}")
        raise ValueError("‚ùå ‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á")
    else:
        logging.info("‚úÖ AQI ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥")

with DAG(
    dag_id='aqi_threshold_alert',
    default_args=default_args,
    description='‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô AQI ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î',
    start_date=datetime(2024, 1, 1),
    schedule_interval=None,  # üîÑ Trigger ‡∏à‡∏≤‡∏Å DAG ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    catchup=False,
    tags=['capstone', 'alert', 'aqi'],
) as dag:

    alert_task = PythonOperator(
        task_id='check_aqi_threshold',
        python_callable=check_high_aqi
    )
