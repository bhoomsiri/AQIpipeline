from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook
from datetime import datetime, timedelta
import logging

default_args = {
    'owner': 'airflow',
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def validate_and_clean_aqi_data():
    hook = PostgresHook(postgres_conn_id='postgres_conn')
    conn = hook.get_conn()
    cur = conn.cursor()

    errors = []

    # ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    cur.execute("""
        SELECT COUNT(*) FROM air_quality_data
        WHERE timestamp_utc >= NOW() - INTERVAL '24 hours'
    """)
    count = cur.fetchone()[0]
    if count == 0:
        errors.append("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")

    # ‚ùó 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AQI < 0
    cur.execute("SELECT COUNT(*) FROM air_quality_data WHERE aqi < 0")
    negative_count = cur.fetchone()[0]
    if negative_count > 0:
        errors.append(f"‚ùå ‡∏û‡∏ö AQI ‡∏ï‡∏¥‡∏î‡∏•‡∏ö: {negative_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    # ‚ö†Ô∏è 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
    cur.execute("""
        WITH ranked AS (
            SELECT ctid, ROW_NUMBER() OVER (
                PARTITION BY city, timestamp_utc
                ORDER BY ctid
            ) AS rn
            FROM air_quality_data
        )
        DELETE FROM air_quality_data
        WHERE ctid IN (
            SELECT ctid FROM ranked WHERE rn > 1
        );
    """)
    deleted_rows = cur.rowcount
    if deleted_rows > 0:
        logging.warning(f"üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß {deleted_rows} ‡πÅ‡∏ñ‡∏ß")

    cur.close()
    conn.commit()
    conn.close()

    if errors:
        for e in errors:
            logging.warning(e)
        raise ValueError("üõë Data validation ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log.")
    else:
        logging.info("‚úÖ Data validation ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

with DAG(
    dag_id='validate_aqi_data',
    default_args=default_args,
    description='Validate and clean AQI data',
    schedule_interval='@daily',
    start_date=datetime(2024, 1, 1),
    catchup=False,
    tags=['capstone','bd533','aqi', 'validate', 'clean'],
) as dag:

    validate_task = PythonOperator(
        task_id='validate_and_clean',
        python_callable=validate_and_clean_aqi_data
    )